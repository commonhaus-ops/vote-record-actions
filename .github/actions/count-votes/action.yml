name: count-votes
description: retrieve most recent votes and update records

inputs:
  bot-email:
    description: 'Email for git config'
    default: '41898282+github-actions[bot]@users.noreply.github.com'
  bot-name:
    description: 'Name for git config'
    default: 'GitHub Action'
  commit-message:
    description: 'Commit message'
    default: '🗳️ Auto-update GH Votes'
  branch:
    description: 'Branch to push to'
    default: 'main'
  removeTags:
    description: 'Comma-separated list of tags to remove from discovered votes'
    required: false
  repositories:
    description: 'Comma-separated list of repositories (owner/name) to inspect'
    required: true
  target_dir:
    description: Directory containing raw vote data (JSON)
    default: votes
  markdown_dir:
    description: Directory for generated markdown content (pages will not be generated if this is unset)
    required: false
  index_file:
    description: Name of index file to generate/update
    required: false
  vote_comment_bot:
    description: 'login of vote counting bot'
    required: false

outputs:
  votes_updated:
    description: True if changes to recorded votes were made
    value: ${{ steps.git_vote_update.outputs.updated }}

runs:
  using: "composite"
  steps:

    - uses: actions/checkout@v4
      with:
        repository: commonhaus/vote-record-actions
        path: 'vote-record-actions'
        fetch-depth: 1
        ref: main

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'vote-record-actions/package-lock.json'

    - name: Configure Git
      shell: bash
      run: |
        git config user.name "${{ inputs.bot-name }}"
        git config user.email "${{ inputs.bot-email }}"

    - name: Git Vote Update
      id: git_vote_update
      shell: bash
      env:
        COMMIT_MSG:   ${{ inputs.commit-message }}
        GITHUB_TOKEN: ${{ github.token }}
        REMOVE_TAGS:  ${{ inputs.removeTags }}
        REPOSITORIES: ${{ inputs.repositories }}
        VOTE_BOT: ${{ inputs.vote_comment_bot }}

        CREATE_INDEX: ${{ inputs.index_file }}
        CREATE_MD:    ${{ inputs.markdown_dir }}

        INDEX_FILE: ${{ github.workspace }}/${{ inputs.index_file }}
        MD_DIR:     ${{ github.workspace }}/${{ inputs.markdown_dir }}
        TARGET_DIR: ${{ github.workspace }}/${{ inputs.target_dir }}

      run: |
        pushd vote-record-actions
          npm ci
          npm run build
        popd

        # required: list of repos to look at
        repos="--repos=${REPOSITORIES}"

        # tags to remove (optional)
        remove=
        if [[ -n "${REMOVE_TAGS}" ]]; then
          remove="--removeTag=${REMOVE_TAGS}"
        fi

        # login of vote counting bot (comment author, optional)
        bot=
        if [[ -n "${VOTE_BOT}" ]]; then
          bot="--bot=\"${VOTE_BOT}\""
        fi

        # directory for generated markdown files (optional)
        markdown=
        if [[ -n "${CREATE_MD}" ]]; then
          markdown="--md=\"${MD_DIR}\""
          mkdir -p ${MD_DIR}
        fi

        # collect vote results from recently updated issues, prs, discussions
        node vote-record-actions/dist/votes.js "${TARGET_DIR}" ${repos} ${remove} ${markdown} ${bot}

        git add -A -- "${TARGET_DIR}"
        if [[ -n "${CREATE_MD}" ]]; then
          git add -A -- "${MD_DIR}"
        fi

        # Regenerate the index if that value is true
        if [ -n "${CREATE_INDEX}" ]; then
          mkdir -p $(dirname ${MD_DIR})
          node vote-record-actions/dist/genIndex.js "${TARGET_DIR}" "${MD_DIR}" "${INDEX_FILE}"
          # Stage the index.
          git add -A -- "${INDEX_FILE}"
        fi

        if git diff --quiet HEAD; then
          echo "-- No changes -- "
        else
          # commit and push vote results
          git commit -am "${COMMIT_MSG}"
          git pull --rebase
          git push
          echo "updated=true" >> $GITHUB_OUTPUT
        fi
